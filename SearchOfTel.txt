다음 코드에 대한 오류 설명

point_node 초기화 순서:
if (p->name[0] == '\0') 조건문 내에서 point_node를 초기화하는 부분이 배열 arr의 24번째 요소를 가리키도록 되어 있는데, 이는 모든 경우에 해당되지 않을 수 있습니다. 이름이 없는 경우에만 해당됩니다.

널 포인터 검사 순서:
if (point_node == NULL) 검사를 while 루프 안에서 point_node를 역참조한 후에 수행하고 있습니다. point_node가 NULL인 경우 strcmp(p->phone, point_node->phone)에서 널 포인터 역참조가 발생할 수 있습니다.
역참조(dereference)는 포인터가 가리키는 메모리 위치에 접근하는 것을 의미합니다. 예를 들어, 포인터 point_node가 가리키는 메모리 위치에 저장된 값에 접근하는 것입니다. 널 포인터 역참조(null pointer dereference)는 포인터가 NULL을 가리키고 있을 때 이를 역참조하는 것으로, 프로그램의 크래시를 초래할 수 있습니다.
기존 코드에서의 문제점은 point_node가 NULL인지 확인하기 전에 point_node->phone이나 point_node->name을 접근하는 부분입니다. 이를 방지하기 위해, 먼저 point_node가 NULL인지 확인한 후에 접근해야 합니다.
즉  point_node가 널일 때, if (!strcmp(p->phone, point_node->phone)) 줄에서 point_node를 역참조하고 있습니다. point_node가 널일 경우, 프로그램이 크래시할 수 있습니다. 따라서 point_node가 널인지 먼저 확인해야 합니다.

while (1) 무한 루프 사용:
무한 루프를 사용하면서 point_node가 NULL인지 체크하는 방식은 비효율적이며, 명확한 종료 조건을 설정하는 것이 좋습니다.


Link_node* search(Link_node* p) 
{
	if (p->name[0] == '\0') 
	{
		Link_node* point_node = arr[24];
		printf("You didn't enter a name.\n");
		printf("Please enter the phone number of the person you want to find.\n");
		enter_phone(p);

		while (1) 
		{
			if (!strcmp(p->phone, point_node->phone)) 
			{  // 찾는 전화번호가 전화번호부에 있는 경우
				return point_node;
			}
			else if(point_node==NULL)
			{
				printf("Sorry, this phone book doesn't have the phone number you want to find.\n");
				return NULL;
			}
			point_node = point_node->link;
		}
		
	}
	else 
	{
		int first = (p->name[0] - 'a') < 0 ? p->name[0] - 'A' : p->name[0] - 'a';
		Link_node* point_node = arr[first];

		while (1) 
		{
			if (!strcmp(p->name, point_node->name))
		       	{  // 찾는 이름이 전화번호부에 있는 경우
				return point_node;
			}
			else if(point_node==NULL)
			{
				printf("Sorry, this phone book doesn't have the phone number you want to find.\n");
				return NULL;
			}
			point_node = point_node->link;
		}
		
	}
}
이름이 입력되지 않은 경우의 point_node 초기화:

전화번호 입력 후 point_node를 arr[24]로 초기화했습니다.
while 루프의 조건 검사:

while (1)을 while (point_node != NULL)로 변경했습니다. 이렇게 하면 point_node가 NULL이 되는 경우 루프가 종료됩니다.
while 루프 내에서 point_node == NULL 검사 제거:

while (point_node != NULL)를 사용하면 루프가 point_node가 NULL이 되는 경우 종료되므로 루프 내에서 else if (point_node == NULL) 조건을 제거했습니다.
전화번호 검색 실패 시 오류 메시지 수정:

오류 메시지를 검색 유형에 맞게 변경했습니다. 전화번호 검색의 경우 메시지를 그대로 유지하고, 이름 검색의 경우 "전화번호" 대신 "이름"을 언급하도록 수정했습니다.
이렇게 하면 무한 루프를 피하고 전화번호부에 항목이 없는 경우를 올바르게 처리할 수 있습니다.

고친 코드=>

Link_node* search(Link_node* p) 
{
	if (p->name[0] == '\0') 
	{
		Link_node* point_node = arr[24];
		printf("You didn't enter a name.\n");
		printf("Please enter the phone number of the person you want to find.\n");
		enter_phone(p);

		while (point_node != NULL) 
		{
			if (!strcmp(p->phone, point_node->phone)) 
			{  // 찾는 전화번호가 전화번호부에 있는 경우
				return point_node;
			}
			point_node = point_node->link;
		}
		printf("Sorry, this phone book doesn't have the phone number you want to find.\n");
		return NULL;
	}
	else 
	{
		int first = (p->name[0] - 'a') < 0 ? p->name[0] - 'A' : p->name[0] - 'a';
		Link_node* point_node = arr[first];

		while (point_node != NULL) 
		{
			if (!strcmp(p->name, point_node->name))
		       	{  // 찾는 이름이 전화번호부에 있는 경우
				return point_node;
			}
			point_node = point_node->link;
		}
		printf("Sorry, this phone book doesn't have the name you want to find.\n");
		return NULL;
	}
}